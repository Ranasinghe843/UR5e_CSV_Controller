#ifndef UR5E_CSV_CONTROLLER__UR5E_CSV_CONTROLLER_HPP
#define UR5E_CSV_CONTROLLER__UR5E_CSV_CONTROLLER_HPP

#include <memory>
#include <string>
#include <vector>

#include "controller_interface/controller_interface.hpp"
#include "rclcpp/subscription.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_buffer.h"
#include "std_msgs/msg/float64_multi_array.hpp"
#include <Eigen/Dense>

#include "std_msgs/msg/string.hpp"
#include "ur_msgs/srv/set_io.hpp"

// auto-generated by generate_parameter_library
#include "ur5e_csv_controller_parameters.hpp"

namespace ur5e_csv_controller
{

    struct CSVLine {
        double time;
        double shoulderPan;
        double shoulderLift;
        double elbow;
        double wrist1;
        double wrist2;
        double wrist3;
        unsigned long led;
    };

    class UR5eCSVController : public controller_interface::ControllerInterface
    {
    public:
        UR5eCSVController();

        ~UR5eCSVController() = default;

        controller_interface::InterfaceConfiguration command_interface_configuration() const override;

        controller_interface::InterfaceConfiguration state_interface_configuration() const override;

        controller_interface::CallbackReturn on_init() override;

        controller_interface::CallbackReturn on_configure(
            const rclcpp_lifecycle::State &previous_state) override;

        controller_interface::CallbackReturn on_activate(
            const rclcpp_lifecycle::State &previous_state) override;

        controller_interface::CallbackReturn on_deactivate(
            const rclcpp_lifecycle::State &previous_state) override;

        controller_interface::return_type update(
            const rclcpp::Time &time, const rclcpp::Duration &period) override;

    protected:
        void declare_parameters();
        controller_interface::CallbackReturn read_parameters();

        std::shared_ptr<ParamListener> param_listener_;
        Params params_;

    private:
        double startTime = 0.0;
        double waitTime = 1.0;

        size_t index = 0;
        std::vector<CSVLine> csvData;

        // publisher for the URScript commands
        rclcpp::Publisher<std_msgs::msg::String>::SharedPtr urscript_publisher;
        rclcpp::Client<ur_msgs::srv::SetIO>::SharedPtr io_client;
        bool waitingForClientResponse = false;

        // return the distance from the current position 
        // to the start of the next position
        double distanceToCSVPosition(size_t index);
        bool readCSVFile(const std::string &filename);
    };

} // namespace csv_controller

#endif // CSV_CONTROLLER__CSV_CONTROLLER_HPP
